% Copyright 2012 Jeffrey Kegler
% This document is licensed under
% a Creative Commons Attribution-NoDerivs 3.0 United States License.
\documentclass[12pt,draft]{amsart}
\usepackage{algorithm}
\usepackage{algpseudocode}
\usepackage{url}

% This is now a "paper", but may be a chapter
% or something else someday
% This command will make any such change easier.
\newcommand{\doc}{paper}

\newcommand{\todo}[1]{\par{\large\bf Todo: #1}\par}
\newcommand{\mymathop}[1]{\mathop{\texttt{#1}}}

\newcommand{\dfn}[1]{{\bf #1}}
\newcommand{\sep}{\,\mid\,}
\newcommand{\mydot}{\raisebox{.05em}{$\,\bullet\,$}}
\newcommand{\cat}{\,.\,}
\newcommand{\size}[1]{\ensuremath{\left | {#1} \right |}}
\newcommand{\order}[1]{\ensuremath{{\mathcal O}(#1)}}
\newcommand{\Oc}{\order{1}}

% I use hyphens in variable names,
% so I need to ensure that subtraction is
% clearly distinguished by the typography
\newcommand{\subtract}{\,-\,}

\newcommand{\var}[1]{\ensuremath{\texttt{#1}}}

\newcommand{\cfg}{CFG}

\newcommand{\de}{\rightarrow}
\newcommand{\destar}
    {\mathrel{\mbox{$\:\stackrel{\!{\ast}}{\Rightarrow\!}\:$}}}
\newcommand{\derivg}[1]{\mathrel{\mbox{$\:\Rightarrow\:$}}}
\newcommand{\derivrg}[2]{\mathrel{\mbox{$\:\stackrel{\!{#1}}%
        {\Rightarrow\!}\:$}}}

\newcommand{\set}[1]{{\left\lbrace #1 \right\rbrace} }
\newcommand{\ah}[1]{#1_{AH}}
\newcommand{\Vah}[1]{\ensuremath{\var{#1}_{AH}}}
\newcommand{\bool}[1]{\var{#1}_{BOOL}}
\newcommand{\Vbool}[1]{\ensuremath{\bool{#1}}}
\newcommand{\dr}[1]{#1_{DR}}
\newcommand{\Vdr}[1]{\ensuremath{\var{#1}_{DR}}}
\newcommand{\Vdrset}[1]{\ensuremath{\var{#1}_{\set{DR}}}}
\newcommand{\eim}[1]{#1_{EIM}}
\newcommand{\Veim}[1]{\ensuremath{\var{#1}_{EIM}}}
\newcommand{\Veimt}[1]{\ensuremath{\var{#1}_{EIMT}}}
\newcommand{\Veimset}[1]{\ensuremath{\var{#1}_{\set{EIM}}}}
\newcommand{\Veimtset}[1]{\ensuremath{\var{#1}_{\set{EIMT}}}}
\newcommand{\Ees}[1]{\ensuremath{#1_{ES}}}
\newcommand{\Vlim}[1]{\ensuremath{\var{#1}_{LIM}}}
\newcommand{\Vlimt}[1]{\ensuremath{\var{#1}_{LIMT}}}
\newcommand{\Eloc}[1]{\ensuremath{{#1}_{LOC}}}
\newcommand{\Vloc}[1]{\Eloc{\var{#1}}}
\newcommand{\Vrule}[1]{\ensuremath{\var{#1}_{RULE}}}
\newcommand{\Vruleset}[1]{\ensuremath{\var{#1}_{\set{RULE}}}}
\newcommand{\Vsize}[1]{\ensuremath{\size{\var{#1}}}}
\newcommand{\Vstr}[1]{\ensuremath{\var{#1}_{STR}}}
\newcommand{\sym}[1]{#1_{SYM}}
\newcommand{\Vsym}[1]{\ensuremath{\var{#1}_{SYM}}}
\newcommand{\Vorig}[1]{\ensuremath{\var{#1}_{ORIG}}}
\newcommand{\symset}[1]{#1_{\lbrace SYM \rbrace} }
\newcommand{\Vsymset}[1]{\ensuremath{\var{#1}_{\set{SYM}}}}
\newcommand{\term}[1]{#1_{TERM}}
\newcommand{\token}[1]{#1_{TOK}}

\newcommand{\alg}[1]{\ensuremath{\textsc{#1}}}
\newcommand{\AH}{\ensuremath{\alg{AH}}}
\newcommand{\Earley}{\ensuremath{\alg{Earley}}}
\newcommand{\Leo}{\ensuremath{\alg{Leo}}}
\newcommand{\Marpa}{\ensuremath{\alg{Marpa}}}

\newcommand{\Vfa}{\var{fa}}
\newcommand{\Vg}{\var{g}}
\newcommand{\Vw}{\var{w}}
\newcommand{\CVw}[1]{\ensuremath{\sym{\Vw[\var{#1}]}}}
\newcommand{\CEw}[1]{\ensuremath{\sym{\Vw[#1]}}}
\newcommand{\Vrules}{\var{rules}}
\newcommand{\GOTO}{\mymathop{GOTO}}
\newcommand{\Next}[1]{\mymathop{Next}(#1)}
\newcommand{\Predict}[1]{\mymathop{Predict}(#1)}
\newcommand{\Postdot}[1]{\mymathop{Postdot}(#1)}
\newcommand{\Penult}[1]{\mymathop{Penult}(#1)}
\newcommand{\myL}[1]{\mymathop{L}(#1)}
\newcommand\Etable[1]{\ensuremath{\mymathop{table}[#1]}}
\newcommand\Rtable[1]{\ensuremath{\mymathop{table}[#1]}}
\newcommand\Rtablesize[1]{\ensuremath{\left |\mymathop{table}[#1]\right |}}
\newcommand\Vtable[1]{\Etable{\var{#1}}}
\newcommand\EEtable[2]{\ensuremath{\mymathop{table}[#1,#2]}}
\newcommand\EVtable[2]{\EEtable{#1}{\var{#2}}}

% I want to use 'call' outside of pseudocode
\newcommand\call[2]{\textproc{#1}\ifthenelse{\equal{#2}{}}{}{(#2)}}%

\newtheorem{theorem}{Theorem}[section]
\newtheorem{lemma}[theorem]{Lemma}

\theoremstyle{definition}
\newtheorem*{definition}{Definition}

\theoremstyle{remark}
\newtheorem*{remark}{Remark}
\newtheorem{observation}[theorem]{Observation}

\hyphenation{oper-and oper-ands}

\begin{document}

\date{\today}

\title{Marpa, a practical general parser: the recognizer}

\author{Jeffrey Kegler}
\thanks{%
This is a draft.
}
\thanks{%
Copyright \copyright\ 2012 Jeffrey Kegler.
}
\thanks{%
This document is licensed under
a Creative Commons Attribution-NoDerivs 3.0 United States License.
}

\begin{abstract}
The Marpa recognizer is described.
Marpa is
a practical and fully implemented
algorithm for the recognition,
parsing and evaluation of context-free grammars.
Marpa's recognizer merges the improvements
to Earley's 1970 algorithm found in
Leo's 1991
and in Aycock and Horspool's 2002 papers.
New with Marpa is that
full knowledge of the state of the parse,
including the list of acceptable tokens,
is available when tokens are scanned.
Advantageous for error detection,
this foreknowledge also
allows ``Ruby Slippers'' parsing --
alteration of the input in reaction
to the parser's expectations.
\end{abstract}

\maketitle

\section{Introduction}

Despite the promise of general context-free parsing,
and the strong academic literature behind it,
it has never been incorporated into a tool
as highly available as yacc\cite{Johnson} or
regular expressions.
The Marpa project was intended
to take the best results from the literature
on Earley parsing off the pages
of the journals and bring them
to a wider audience.
Marpa::XS\cite{Marpa-XS},
a stable version of this tool,
was uploaded to the CPAN Perl archive
on Solstice Day in 2011.

As implemented,
Marpa parses,
without exception,
all context-free grammars.
Time bounds are the best of Leo\cite{Leo1991}
and Earley\cite{Earley1970}.
The Leo bound,
\Oc{} for LR-regular,
is especially relevant to
Marpa's goal of being a practical parser:
If a grammar is in a class of grammar currently in practical use,
Marpa parses it in linear time.

Error-detection properties,
extremely important,
have been overlooked in the past.
Marpa breaks new ground in this respect.
Marpa has the immediate error detection property,
but goes well beyond that:
it is fully aware of the state of the parse,
and can report this to the user while tokens are
being scanned.

Marpa allows the lexer to check its list
of acceptable tokens before a token is scanned.
But because rejection of tokens is easily and 
efficiently recoverable,
the lexer is also free to take an event-driven
approach.
Error detection is no longer
an act of desperation,
but a parsing technique in its own right.
If a token is rejected,
the lexer is free to create a new token
in the light of the parser's expectations.
This approach can be described
as making the parser's
``wishes'' come true,
and we have called this
``Ruby Sippers Parsing''.

One use of the Ruby Slippers technique is to
parse with a clean
but oversimplified grammar,
programming the lexical analyzer to make up for the grammar's
short-comings on the fly.
The author has implemented an HTML parser\cite{Marpa-HTML},
based on a grammar that assumes that all start
and end tags are present.
Such an HTML grammar is too simple even to describe perfectly
standard-conformant HTML,
but the the lexical analyzer is
programmed to supply start and end tags as requested by the parser.
The result is a very simply and cleanly designed parser
that parses very liberal HTML
and accepts all input files,
in the worst case
treating them as highly defective HTML.

Section
\ref{s:preliminaries} describes the notation and conventions
of this \doc.
Section \ref{s:rewrite} deals with Marpa's
grammar rewrites.
Sections \ref{s:earley} and \ref{s:earley-ops}
introduce Earley's algorithm.
Section \ref{s:leo} describes Leo's modification
to Earley's algorithm;
and Section \ref{s:AHFA} describes the modifications
suggested by Aycock and Horspool.
Section \ref{s:pseudocode} presents the pseudocode
for Marpa's recognizer.
Section
\ref{s:proof-preliminaries}
describes notation and deals with other 
preliminaries
to the theoretical results.
Section
\ref{s:correct}
contain a proof of Marpa's correctness,
while Section \ref{s:complexity} contains
its complexity results.
Finally,
section \ref{s:generalization} generalizes
the definitions of grammar and input.

\section{Preliminaries}
\label{s:preliminaries}
\label{s:start-prelim}

We assume familiarity with the theory of parsing,
as well as Earley's algorithm.
This \doc{} will
use subscripts to indicate commonly occurring types.
\begin{center}
\begin{tabular}{ll}
$\var{X}_T$ & The variable \var{X} of type $T$ \\
$\var{set-one}_\set{T}$ & The variable \var{set-one} of type set of $T$ \\
$SYM$ & The type for a symbol \\
\Vsym{a} & The variable \var{a} of type $SYM$ \\
\Vsymset{set-two} & The set of symbols \var{set-two} \\
\end{tabular}
\end{center}
Subscripts may be omitted when the type
is obvious from the context.
The notation for
constants is the same as that for variables.

Multi-character variable names will be common,
and operations will never be implicit.
\begin{center}
\begin{tabular}{ll}
Multiplication &  $\var{a} \times \var{b}$ \\
Concatenation & $\var{a} \cat \var{b}$ \\
Subtraction & $\var{symbol-count} \subtract \var{terminal-count}$ \\
\end{tabular}
\end{center}

Where \Vsymset{abced} is a set of symbols,
let $\var{abced}^\ast$ be the set of all strings
(type $STR$) formed
from those symbols.
(Note that sentential forms are of type $STR$.)
Let $\var{abced}^+$ be the subset of $\var{abced}^\ast$ that
contains all of its elements that are not of zero length.

For the purposes of this \doc{} consider,
without loss of generality,
a grammar \Vg,
and a set of symbols, \Vsymset{alphabet}.
Call the language of \var{g}, $\myL{\Vg}$,
where $\myL{\Vg} \in \var{alphabet}^\ast$.
Divide \Vsymset{alphabet} into two disjoint sets,
\Vsymset{lh} and \Vsymset{term}.

For rewriting this \doc{} uses,
without loss of generality,
the set of duples, \Vruleset{rules}.
The type $RULE$ will be
a duple
of the form $[\Vsym{lhs} \de \Vstr{rhs}]$,
where
\begin{gather*}
\Vsym{lhs} \in \var{term} \\
\Vstr{rhs} \in \var{alphabet}^+
\end{gather*}
\Vsym{lhs} is referred to as the left hand side (LHS)
of \Vrule{r}.
\Vstr{rhs} is referred to as the right hand side (RHS)
of \Vrule{r}.
This definition follows \cite{AH2002},
which departs from tradition by disallowing an empty RHS.

The grammar \Vg{} is the 4-tuple
\begin{equation*}
    (\Vsymset{alphabet}, \Vsymset{term}, \var{rules}, \Vsym{accept})
\end{equation*}
where \Vsymset{term} is the
set of terminal symbols,
\begin{equation*}
    \Vsymset{term} \subset \Vsymset{alphabet},
\end{equation*}
and \Vsym{accept} a dedicated acceptance symbol.
The set of potential LHS symbols, \Vsymset{lh} is
$\var{alphabet} \setminus \var{term}$.
Without loss of generality,
it is assumed that
\begin{equation*}
\Vsym{accept} \in \Vsymset{lh},
\end{equation*}
and that there is a dedicated acceptance rule,
\begin{equation*}
\Vrule{accept} = [ \Vsym{accept} \de \Vsym{start} ],
\end{equation*}
such that for every rule,
\begin{equation*}
\Vrule{x} = [ \Vsym{lhs} \de \Vsymset{rhs} ]
\end{equation*}
we have both of
\begin{gather*}
\Vsym{accept} = \Vsym{lhs} \implies \Vrule{x} = \Vrule{accept} \\
\Vsym{accept} \notin \Vsymset{rhs}
\end{gather*}

Let the input to parse be \Vw, $\Vw \in \var{alphabet}^\ast$.
Locations in the input will be of type LOC.
Let \Vsize{w} be the length of the input, counted in symbols.
Let \CVw{i},
$\CVw{i} \in \Vsymset{term}$ be character \var{i}
of the input,
$0 \le \Vloc{i} < \Vsize{w}$.

In this \doc{},
\Earley{} will refer to the Earley's original
recognizer\cite{Earley1970}.
\Leo{} will refer to Leo's revision of \Earley{}
as described in~\cite{Leo1991}.
\AH{} will refer to the Aycock and Horspool's revision
of \Earley{}
as described in~\cite{AH2002}.
Where $\alg{Recce}$ is a recognizer,
$\myL{\alg{Recce},\Vg}$ will be the language accepted by $\alg{Recce}$
when parsing \Vg.

\section{Rewriting the grammar}
\label{s:rewrite}

We have already noted
that no rules of \Vg{}
have a zero-length RHS.
Further, no rule can be nullable
and all symbols must be either nulling or non-nullable --
no symbol can be a proper nullable.
These restrictions follow Aycock and Horspool\cite{AH2002}.
The elimination of empty rules and proper nullables
is done by rewriting the grammar and,
as shown in \cite{AH2002},
is without loss of generality.
\cite{AH2002} also discusses the evaluation issues
associated with its rewrites.

Aycock and Horspool allowed
a single empty start rule
to deal with null parses.
Marpa eliminates the need for empty rules in its grammars
by treating null parses and trivial grammars as special cases.
(Trivial grammars are those which recognize only the null string.)

Because Marpa claims to be a practical parser,
it is important to emphasize
that all grammar rewrites in this \doc{}
are done in such a way that the semantics
of the original grammar can be reconstructed
simply and efficiently at evaluation time.
As one example,
when a rewrite involves the introduction of new rule,
semantics for the new rule can be defined to pass its operands
up to a parent rule as a list,
and the semantics of the pre-existing parent rule can
be ``wrapped'' so that they reassemble these lists
into operands that are properly formed
for the original semantics.

As implemented,
the Marpa parser allows users to associate
semantics with an original grammar,
which has none of the restrictions imposed
on grammars in this \doc{}.
The user of a Marpa parser 
may specify any context-free grammar,
including one with properly nullable symbols,
empty rules, etc.
The user specifies his semantics in terms
of this original, ``free-form'', grammar.
Marpa implements the rewrites,
and performs evaluation,
in such a way as to keep them invisible to
the user.
From the user's point of view,
the ``free-form'' of his grammar is the
one being used for the parse,
and the one to which 
the semantics are applied.

\section{Earley's algorithm}
\label{s:earley}

Let $\Vrule{r} \in \Vrules$
be a rule,
and $\Vsize{r}$ the length of its RHS.
A dotted rule (type $DR$) is a duple, $[\Vrule{r}, \var{pos}]$,
where $0 < \var{pos} < \size{\Vrule{r}}$.
The position indicates the extent to which
the rule has been recognized,
and is represented with a raised dot,
so that if
\begin{equation*}
[\Vsym{A} \de \Vsym{X} . \Vsym{Y} . \Vsym{Z}]
\end{equation*}
is a rule,
\begin{equation*}
[\Vsym{A} \de \var{X} . \var{Y} \mydot \var{Z}]
\end{equation*}
is the dotted rule with the dot at
$\var{pos} = 2$,
between \Vsym{Y} and \Vsym{Z}.

For a \Vdr{x} such that
\begin{equation*}
\Vdr{x} = [\Vsym{A} \de \Vstr{alpha} \mydot \Vsym{next} \Vstr{beta}],
\end{equation*}
we have
\begin{align*}
\Postdot{\Vdr{x}} & = \Vsym{next} \quad \text{and} \\
\Next{\Vdr{d}} & =
    [ \Vsym{A} \de \Vstr{alpha} \cat \Vsym{next} \mydot \Vstr{beta} ].
\end{align*}
If \Vdr{x} is such that
\begin{equation*}
\Vdr{x} = [\Vsym{A} \de \Vstr{alpha} \mydot],
\end{equation*}
then
$\Postdot{\Vdr{x}} = \Next{\Vdr{x}} = \Lambda$.
If for \Vdr{x} in the above,
\begin{equation*}
\Postdot{\Vdr{x}} \ne \Lambda \wedge \Vstr{beta} \destar \epsilon
\end{equation*}
then
$\Penult{\Vdr{x}} = \Vsym{next}$.
Otherwise,
$\Penult{\Vdr{x}} = \Lambda$.

In the following observations,
if
\begin{equation*}
    \Vdr{d} = [ \Vsym{L} \de \Vstr{alpha} \mydot \Vsym{t} \cat \Vstr{beta} ]
\end{equation*}
then
\begin{equation*}
\end{equation*}
be 

The \dfn{initial dotted rule} is
\begin{equation*}
\Vdr{initial} = [\Vsym{accept} \de \mydot \Vsym{start} ].
\end{equation*}
A \dfn{predicted dotted rule} is a dotted rule,
other than the initial dotted rule,
with a dot position of zero.
\begin{equation*}
\Vdr{predicted} = [\Vsym{A} \de \mydot \Vstr{alpha} ].
\end{equation*}
A \dfn{confirmed dotted rule}
is the initial dotted rule,
or a dotted rule
with a dot position greater than zero.
A \dfn{completed dotted rule} is a dotted rule with its dot
position after the end of its RHS.
\begin{equation*}
\Vdr{completed} = [\Vsym{A} \de \Vstr{alpha} \mydot ].
\end{equation*}
Predicted, confirmed and completed dotted rules
and also called, respectively,
\dfn{predictions}, \dfn{confirmations} and \dfn{completions}.

A traditional Earley item (type $EIMT$) is a duple
\[
    [\Vdr{dotted-rule}, \Vorig{x}]
\]
of dotted rule and origin.
(The origin is the location where recognition of the rule
started.
It is sometimes called the ``parent''.)
For convenience, the type $ORIG$ will be a synonym
for $LOC$, indicating that the variable designates
the origin element of an Earley item.
Earley sets are sets in the strict
sense -- duplicate Earley items are not added.

\begin{sloppypar}
An traditional Earley parser builds a table of Earley sets,
\EVtable{\Earley}{i},
$0 \le \Vloc{i} \le \size{\Vw}$.
Each set is the closure of the 
initialization, scanning, reduction and prediction
operations.
These four operations
are called in this \doc{} the {\bf basic
Earley operations}.
\end{sloppypar}

The sets are built in order from 0 to $\size{\Vw}$.
Recall that \Vrule{accept} was $[ \Vsym{accept} \de \Vsym{start} ]$
Define \Vdr{accept} to be $[ \Vsym{accept} \de \Vsym{start} \mydot ]$.
The input \Vw{} is accepted if and only if
\begin{equation*}
[\Vdr{accept}, 0] \in \Etable{\Vsize{\Vw}}
\end{equation*}

At points,
we will need to compare the Earley sets
produced by the different recognizers.
Earley sets are of type $ES$, although
the type is often omitted to avoid clutter.
\EVtable{\alg{Recce}}{i} will be Earley set \Vloc{i}
in the table of Earley sets of
the \alg{Recce} recognizer.
For example,
\EVtable{\Marpa}{j} will be Earley set \Vloc{j}
in \Marpa's table of Earley sets.
In contexts where it is clear which recognizer is
intended,
\Vtable{k} will be Earley set \Vloc{k}
in that recognizer's table of Earley sets.
If \Ees{\var{working}} is an Earley set,
$\size{\Ees{\var{working}}}$ is the number of Earley items
in \Ees{\var{working}}.

\Rtablesize{\alg{Recce}} is the total number
of Earley items in all Earley sets for \alg{Recce}.
\begin{equation*}
\Rtablesize{\alg{Recce}} =
     \sum\limits_{\Vloc{i}=0}^{\size{\Vw}}
	{\size{\EVtable{\alg{Recce}}{i}}}
\end{equation*}
For example,
\Rtablesize{\Marpa} is the total number
of Earley items in all the Earley sets of
a \Marpa{} parse.

\section{Operations of the Earley algorithm}
\label{s:earley-ops}

In the following,
\Vloc{c} is the current Earley set.

\subsection{Initialization}
\label{d:initial}
The {\bf initialization} basic Earley operation only takes
place in Earley set 0.
Earley set 0 is initialized to
\begin{gather*}
\set{ [ \Vdr{initial}, 0 ] }, \\
\Vdr{initial} = [\Vsym{accept} \de \mydot \Vsym{start} ]
\end{gather*}

\subsection{Scanning}
\label{d:scan}
\begin{sloppypar}
A {\bf scanning} basic Earley operation takes place
in all Earley sets other than Earley set 0
for each pair $[\Veimt{predecessor}, \Vsym{token}]$,
where we have all of
\begin{itemize}
\item[(i)] $\var{token} = \CEw{\Eloc{(\var{c} \subtract 1)}}$
\item[(ii)] $\Veimt{predecessor} \in \Etable{\Eloc{(\var{c} \subtract 1)}}$
\item[(iii)] $\Veimt{predecessor} = [ \Vdr{before}, \Vorig{predecessor} ]$
\item[(iv)] $\Postdot{\Vdr{before}} = \Vsym{token}$
\end{itemize}
A scanning operation
adds \Veimt{result} to Earley set \Vloc{c},
where
\begin{equation*}
\Veimt{result} = [ \Next{\Vdr{before}}, \Vorig{predecessor} ]
\end{equation*}
\Veimt{predecessor} is called the predecessor of the scanning operation
and \Veimt{result} is called its result.
The token, \Vsym{token}, is also called the transition symbol
of the scanning operation.
\end{sloppypar}

\subsection{Reduction}
\label{d:reduction}
An {\bf Earley reduction} basic operation is attempted
in every Earley set
for every pair $[\Veimt{predecessor}, \Vsym{lhs}]$,
where there exists a \Veimt{component} such that
we have all of
\begin{itemize}
\item[(i)] $\Veimt{component} \in \Vtable{c}$
\item[(ii)] $\Veimt{component} = [ \Vdr{complete}, \Vorig{component} ]$
\item[(iii)] $\Vdr{complete} = [ \Vsym{lhs} \de \Vstr{rhs} \mydot ]$
\item[(iv)] $\Veimt{predecessor} \in \Etable{\Vorig{component}}$
\item[(v)] $\Veimt{predecessor} = [ \Vdr{before}, \Vorig{predecessor} ]$
\item[(vi)] $\Postdot{\Vdr{before}} = \Vsym{lhs}$
\end{itemize}
A reduction operation
adds \Veimt{result} to Earley set \Vloc{c},
where
\begin{equation*}
\Veimt{result} = [ \Next{\Vdr{before}}, \Vorig{predecessor} ]
\end{equation*}
\Veimt{component} is called the component of the reduction operation.\footnote{
The term ``component'' comes from Irons \cite{Irons}.
}
\Veimt{predecessor} is called the predecessor of the reduction operation
and \Veimt{result} is called its result.
\Vsym{lhs} is the transition symbol
of the reduction operation.

\subsection{Prediction}
\label{d:prediction}
Let $\mymathop{Predict}(\Vdr{d})$
be the set of dotted rules
\begin{equation*}
\set{ [ \Vsym{L} \de \mydot \Vstr{rh} ]}
\end{equation*}
of which all of the following are true
\begin{gather*}
[ \Vsym{L} \de \Vstr{rh} ] \in \Vrules \\
\Vsym{P} = \Postdot{\Vdr{d}} \\
\Vsym{P} \destar \Vsym{L} \cat \Vstr{alpha}
\end{gather*}
A {\bf prediction} basic Earley operation is attempted
in every Earley set
for every \Veimt{predecessor}
\begin{itemize}
\item[(i)] $\Veimt{predecessor} \in \Vtable{c}$
\item[(ii)] $\Veimt{predecessor} = [ \Vdr{predecessor}, \Vorig{predecessor} ]$
\end{itemize}
The prediction operation
adds the members of \Veimtset{results}
to Earley set \Vloc{c},
where
\begin{multline*}
\Veimtset{results} = \{ [ \Vdr{prediction}, \Vloc{c} ] : \\
	\Vdr{prediction} \in \Predict{\Vdr{predecessor}} \}
\end{multline*}
\Veimt{predecessor} is called the predecessor of the prediction operation.
and the members of \Veimtset{results} are its results.

\subsection{Causation}
The \dfn{causation} of an operation
is the set of its operands.
Operands may be tokens (as in the case of scans and reductions)
or Earley items (as in every case except initialization).
An operand of an operation are also called a \dfn{cause}
of that operation.
Specifically,
a \dfn{cause} of an Earley operation is
\begin{itemize}
\item the predecessor Earley item of a scanning, reduction
or prediction operation; or
\item the component Earley item of a reduction operation; or
\item the transition symbol of a scanning or
reduction operation.
\end{itemize}

The cause of an operation is also called
the \dfn{cause} of all the Earley items which are the
results of that operation.
An Earley item which is result of an scanning or reduction operation
is called the \dfn{successor} of that operation's predecessor.

\section{The Leo algorithm}
\label{s:leo}

In \cite{Leo1991}, Joop Leo presented a method for
dealing with right recursion in \order{n} time.
Leo shows that,
with his modification, Earley's algorithm
is \order{n} for all LR-regular grammars.
(LR-regular is LR where lookahead
is infinite length, but restricted to
distinguishing between regular expressions.)

Summarizing Leo's method,
it consists of spotting potential right recursions
and memoizing them.
Leo restricts the memoization to situations where
the right recursion is unambiguous.
Potential right recursions are memoized by
Earley set, using what Leo called
``transitive items''.
In this \doc{} Leo's ``transitive items''
will be called Leo items.
Leo items in the form that Marpa uses
will be type $LIM$.
``Traditional'' Leo items,
that is, those in the form used in Leo's paper\cite{Leo1991},
will be type $LIMT$.

In each Earley set, there is at most one Leo item per symbol.
A traditional Leo item (LIMT) is the triple
\begin{equation*}
[ \Vdr{top}, \Vsym{transition}, \Vorig{top} ]
\end{equation*}
where \Vsym{transition} is the transition symbol,
and
\begin{equation*}
\Veimt{top} = [\Vdr{top}, \Vorig{top}]
\end{equation*}
is the Earley item to be added on reductions over
\Vsym{transition}.

Leo items memoize what would otherwise be sequences
of Earley items.
Leo items only memoize unambiguous (or
deterministic) sequences,
so that the top of the sequence can represent
the entire sequence --
the only role the other EIMT's in the sequence would
play in a parse is to derive the top EIMT.
We will call these memoized sequences, Leo sequences.

Each Leo sequence, if fully expanded,
would contain \order{n} items,
where \var{n} is the length of the sequence.
In \Earley, each such sequence would be expanded in every
Earley set which is the origin of an EIMT included in the
sequence, and the total number of EIMT's would be
\order{n^2}.

With Leo memoization, a single EIMT stands in for the sequence.
There are \Oc{} Leo items per Earley set,
so the cost of the sequence is \Oc{} per Earley set,
or \order{n} for the entire sequence.
If, at evaluation time,
it is desirable to expand the Leo sequence,
only those items actually involved in the parse
need to be expanded.
All the EIMT's of a potential right-recursion 
will be in one Earley set and the number of EIMT's
will be \order{n},
so that even including expansion of the Leo sequence
for evaluation, the time and space complexity of
the sequence remains \order{n}.

Implementing Leo memoization requires
adding another basic operation.
In addition to the basic operations of \Earley,
\Leo{} includes Leo reduction.
In every Earley set after the first,
for every symbol \Vsym{lhs},
traditional \Earley{} reduction looks for pairs
$[\Veimt{pred}, \Vsym{lhs}]$
such that,
where \Vorig{component} is the origin
of the reduction's component operand,
we have both of
\begin{gather*}
    \Veimt{pred} \in \EVtable{\Earley}{\Vorig{component}} \\
    \Penult{\var{pred}} = \Vsym{lhs}
\end{gather*}

Instead, \Leo{} first looks for a LIMT such that,
for some \Vdr{top}, \Vorig{top},
we have both of
\begin{gather*}
    \Vlimt{pred} \in \EVtable{\Earley}{\Vorig{component}} \\
    \Vlimt{pred} = [ \Vdr{top}, \Vsym{lhs}, \Vorig{top} ]
\end{gather*}
If such an LIMT exists,
there is a Leo reduction for \Vsym{lhs} from
Earley set \Vorig{component}.
If there is a Leo reduction,
$[ \Vdr{top}, \Vorig{top} ]$ is added to
the current Earley set,
and reduction on \Vsym{lhs} from Earley set \Vorig{component}
is not attempted.
If there is no Leo reduction,
the standard reduction of \Earley{} is attempted.

\section{The Aycock-Horspool finite automaton}
\label{s:AHFA}
\label{s:end-prelim}

In this \doc{} a
``split LR(0) $\epsilon$-DFA''
as described by Aycock and Horspool\cite{AH2002},
will be called an Aycock-Horspool Finite Automaton,
or AHFA.
A full description of how to derive an AHFA in theory
can be found in \cite{AH2002},
and examples of how to derive it in practice
can be found in the code for Marpa\cite{Marpa-R2,Marpa-XS}.
Here I will summarize those ideas behind AHFA's
that are central to Marpa.

Aycock and Horspool based their AHFA's
on a few observations.
\begin{itemize}
\item
In practice, groups of Earley items sharing the same origin,
but having different dotted rules,
often appear in the same Earley set.
\item
There is in the literature a method
for associating groups of dotted rules that often appear together
when parsing.
This method is the LR(0) DFA used in the much-studied
LALR and LR parsers.
\item
The LR(0) items that are the components of LR(0)
states are, exactly, dotted rules.
\item
By taking into account symbols which derive the
null string, the LR(0) DFA could be turned into an
LR(0) $\epsilon$-DFA,
which would be even more effective
at grouping dotted rules which often occur together
into a single DFA state.
\end{itemize}

AHFA states are sets of dotted rules.
Aycock and Horspool realized that by changing Earley items
to track AHFA states, instead of individual dotted rules,
the size of Earley sets could be reduced,
and Earley's algorithm made faster in practice.
AHFA states are a shorthand that Earley items
can use for groups of dotted rules that occur together frequently.

As a reminder,
the original Earley items (EIMT's)
were duples, $[\Vdr{x}, \Vorig{x}]$,
where \Vdr{x} is a dotted rule.
An Aycock-Horspool Earley item is a duple
\begin{equation*}
[\Vah{y}, \Vorig{y}],
\end{equation*}
where $\Vah{y}$ is an AHFA state.
Marpa's Earley items are Aycock-Horspool Earley items.
A Marpa Earley item has type $EIM$,
and a Marpa Earley item is often referred to as an EIM.

\begin{sloppypar}
Aycock and Horspool did not consider
Leo's modifications,
but Marpa incorporates them,
and changes its Leo items to use AHFA states.
Marpa's Leo items (LIM's) are triples
of the form
\begin{equation*}
[\Vah{top}, \Vsym{transition}, \Vorig{top}],
\end{equation*}
where \Vsym{transition} and \Vorig{top}
are as in the traditional Leo items,
and \Vah{top} is an AHFA state.
A Marpa Leo item has type $LIM$.
\end{sloppypar}

\cite{AH2002} defines AHFA states (type $AH$) as sets
of dotted rules.
They also define a partial transition function for
pairs of AHFA state and symbol,
\begin{equation*}
\GOTO: \Vfa, (\epsilon \cup \var{alphabet}) \mapsto \Vfa.
\end{equation*}
$\GOTO(\Vah{from}, \epsilon)$ is a
\dfn{null transition}.
(AHFA's are not fully deterministic.)
If \Vah{predicted} is the result of a null transition,
it is called a \dfn{predicted} AHFA state.
If an AHFA state is not a \dfn{predicted} AFHA state,
it is called a \dfn{confirmed} AHFA state.
The initial AHFA state is a confirmed AHFA state.
(In \cite{AH2002} confirmed states are called ``kernel states'',
and predicted states are called ``non-kernel states''.)

An AHFA is not a partition of the dotted
rules --
a single dotted rule can occur
in more than one AHFA state.
This does not happen frequently,
but it happens often enough,
even in practical grammars,
that the Marpa implementation has to provide for it.

What does not seem to occur in practice
is that
the size of a \Marpa{} Earley set grows larger
than that of one of Earley's original sets.
It seems the AHFA is always a win,
at least for practical grammars.

\begin{sloppypar}
In combining
the improvements of Leo~\cite{Leo1991} and
Aycock and Horspool\cite{AH2002},
the following theorem is crucial.
\begin{theorem}\label{t:leo-singleton}
If the AHFA state of
a Marpa Earley item (EIM) is the result of a
Leo reduction,
then its AHFA state contains only one dotted rule.
\end{theorem}
\end{sloppypar}

\begin{proof}
Since the Earley item is the result of a Leo reduction,
we know that its AHFA state contains a completed rule.
Call that completed rule, \Vdr{complete}.
Let \Vrule{c} be the rule of \Vdr{complete},
and \var{cp} its dot position.
$\var{cp} > 0$ because completions are never
predictions.

Suppose, for a reduction to absurdity,
that the AHFA state contains another dotted rule,
\Vdr{other},
$\Vdr{complete} \neq \Vdr{other}$.
Let \Vrule{o} be the rule of \Vdr{other},
and \var{op} its dot position.
AHFA construction never places a prediction in the same
AHFA state as a completion, so
\Vdr{other} is not a prediction.
Therefore, $\var{op} > 0$.
To show this outer reduction to absurdity, we first prove that
by an inner reductio that
$\Vrule{c} \neq \Vrule{o}$,
then by another inner reductio that
$\Vrule{c} = \Vrule{o}$.

Assume, for an inner reductio,
that 
$\Vrule{c} = \Vrule{o}$.
By the construction of an AHFA
state, both dotted rules resulted from the same series
of transitions.
But the same series of transitions over the
same rule would result in the same dot position,
$\var{cp} = \var{op}$,
so that if $\Vrule{c} = \Vrule{o}$,
$\Vdr{complete} = \Vdr{other}$,
which is contrary to the assumption for the outer reductio.
This shows the first inner reductio.

Next, we assume for an inner reductio that
$\Vrule{c} \ne \Vrule{o}$.
Since both dotted rules are in the same EIM
and neither is a prediction,
both must result from transitions,
and their transitions must have been from the same Earley set.
Since they are in the same AHFA state,
by the AHFA construction,
that transition must have been
over the same transition symbol.
\Leo{} requires,
for each predecessor Earley set and transition symbol,
that a Leo transition be from a single rule.
The assumption for the reductio is that \Vdr{complete}
and \Vdr{other} are in the same Leo reduction state,
which requires their last transition to have been
over the same symbol and from the same Earley set.
To obey the Leo uniqueness requirement,
we must have $\Vrule{c} = \Vrule{o}$.
The assumption for the outer reductio
is that both \Vdr{complete} and \Vdr{other}
share an AHFA state in a Leo reduction EIM,
so they must obey the Leo uniqueness requirement.
Therefore
$\Vrule{c} = \Vrule{o}$, which contradicts
the assumption for the second inner reductio.

By the two inner reductio's,
we have both
$\Vrule{c} = \Vrule{o}$
and $\Vrule{c} \neq \Vrule{o}$,
which completes the outer reduction to absurdity.
If \Vdr{complete} is a dotted rule
in the AHFA state of a Leo reduction EIM,
it must be the only dotted rule in that AHFA state.
\end{proof}

\section{The Marpa Recognizer}
\label{s:recce}
\label{s:pseudocode}

\subsection{Complexity}

Alongside the pseudocode of this section
are observations about its space and time complexity.
In what follows,
we will charge all time and space resources
to attempts to add Earley items.
We will show that
each addition of an Earley item to the
Earley table takes amortized \Oc{} time and space.
We will also show
that each attempt to add a duplicate Earley item
takes amortized \Oc{} time.
In Section \ref{s:complexity},
we will characterize
the order of magnitude of the actual Earley items
and of the attempts to add Earley items,
and their relationship to each other.

At points, it will not be convenient to speak of
charging a resource immediately
to an Earley item
or to an attempt to add a duplicate
Earley item.
In those circumstances,
we speak of charging time and space
\begin{itemize}
\item to the parse; or
\item to the Earley set.
\end{itemize}

We can charge time and space to the parse itself,
as long as the time and space charged is \Oc.
Afterwards, this resource can be re-charged to
the initial Earley item, which is present in all parses.
Soft and hard failures always uses worst-case \Oc{} resource,
and are always charged to the parse.

We will charge resources to the Earley set,
as long as the time or space is \Oc.
Afterwards,
the resource charged to the Earley set can be
re-charged to an arbitrary member of the Earley set,
for example, the first.
If an Earley set is empty,
the parse must fail,
and the time is charged to the parse.

When discussing each procedure, we will state whether
the time and space we are charging is inclusive, exclusive
or caller-included.
The exclusive time or space of a procedure is that
which it uses directly,
ignoring resource usage by called procedures.
Inclusive time or space includes
resource usage by called procedures.
Caller-included time and space is charged to
a procedure's direct or indirect caller.

\begin{algorithm}[h]
\caption{Marpa Top-level}
\begin{algorithmic}[1]
\Procedure{Main}{}
\State \Call{Initial}{}
\For{ $\var{i}, 0 \le \var{i} \le \Vsize{w}$ }
\State \Comment At this point, $\Etable{\var{x}}$ is complete, for $0 \le \var{x} < \var{i}$
\State \Call{Scan pass}{$\var{i}, \var{w}[\var{i} \subtract 1]$}
\If{$\size{\Etable{\var{i}}} = 0$}
\State reject \Vw{} and return
\EndIf
\State \Call{Reduction pass}{\var{i}}
\EndFor
\For{every $[\Vah{x}, 0] \in \Etable{\Vsize{w}}$}
\If{$\Vdr{accept} \in \Vah{x}$}
\State accept \Vw{} and return
\EndIf
\EndFor
\State reject \Vw{}
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Top-level code}

Exclusive time and space for the loop over the Earley sets
is charged to the Earley sets,
and overhead is charged to the parse.
All these resource charges are obviously \Oc.

\subsection{Ruby Slippers parsing}
This top-level code represents a significant change
from \AH{}.
\call{Scan pass}{} and \call{Reduction pass}{}
are separated.
As a result,
when scanning of tokens which start at location \Vloc{i} begins,
the Earley sets for all locations prior to \Vloc{i} are complete.
This means that the scanning operation has available, in
the Earley sets,
full information about the current state of the parse,
including which tokens are acceptable during the scanning phase.


\begin{algorithm}[h]
\caption{Initialization}
\begin{algorithmic}[1]
\Procedure{Initial}{}
\State \Call{Add EIM pair}{$0, \ah{start}, 0$}
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Initialization}
\label{p:initial-op}

\begin{sloppypar}
Inclusive time and space is \Oc{}
and can be charged to the parse.
\end{sloppypar}

\begin{algorithm}[h]
\caption{Marpa Scan pass}
\begin{algorithmic}[1]
\Procedure{Scan pass}{$\Vloc{i},\Vsym{a}$}
\For{each $\Veim{predecessor} \in \var{transitions}((\var{i} \subtract 1),\var{a})$}
\State $[\Vah{from}, \Vloc{origin}] \gets \Veim{predecessor}$
\State $\Vah{to} \gets \GOTO(\Vah{from}, \Vsym{a})$
\State \Call{Add EIM pair}{$\Vloc{i}, \Vah{to}, \Vloc{origin}$}
\EndFor
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Scan pass}
\label{p:scan-op}

\begin{sloppypar}
\var{transitions} is a set of tables, one per Earley set.
The tables in the set are indexed by symbol.
Symbol indexing is \Oc, since the number of symbols
is a constant, but
since the number of Earley sets grows with
the length of the parse,
it cannot be assumed that Earley sets can be indexed by location
in \Oc{} time.
For the operation $\var{transitions}(\Vloc{l}, \Vsym{s})$
to be in \Oc{} time,
\Vloc{l} must represent a link directly to the Earley set.
In the case of scanning,
the lookup is always in the previous Earley set,
which can easily be tracked in \Oc{} space
and retrieved in \Oc{} time.
Inclusive time and space can be charged to the
Earley item attempts.
\end{sloppypar}

\begin{algorithm}[h]
\caption{Reduction pass}
\begin{algorithmic}[1]
\Procedure{Reduction pass}{\Vloc{i}}
\State Note: This loop must include items added
\State \hspace{2.5em} by \Call{Reduce one LHS}{}
\For{each Earley item $\Veim{work} \in \Vtable{i}$}
\State $[\Vah{work}, \Vloc{origin}] \gets \Veim{work}$
\State $\Vsymset{lh-sides} \gets$ a set containing the LHS
\State \hspace\algorithmicindent of every completed rule in \Veim{work}
\For{each $\Vsym{lhs} \in \Vsymset{lh-sides}$}
\State \Call{Reduce one LHS}{\Vloc{i}, \Vloc{origin}, \Vsym{lhs}}
\EndFor
\EndFor
\State \Call{Memoize transitions}{\Vloc{i}}
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Reduction pass}

The loop over \Vtable{i} must also include
any items added by \call{Reduce one LHS}.
This can be done by implementing \Vtable{i} as an ordered
set and adding new items at the end.

Exclusive time is clearly \Oc{}
and may be charged to each \Veim{work}.
Overhead may be charged to the Earley set.

\begin{algorithm}[h]
\caption{Memoize transitions}
\begin{algorithmic}[1]
\Procedure{Memoize transitions}{\Vloc{i}}
\For{every \Vsym{postdot}, a postdot symbol of $\Vtable{i}$}
\If{postdot transition is unique by rule}
\State Set $\var{transitions}(\Vloc{i},\Vsym{postdot})$
\State \hspace\algorithmicindent to an LIM
\Else
\State Set $\var{transitions}(\Vloc{i},\Vsym{postdot})$
\State \hspace\algorithmicindent to the set of EIM's which have
\State \hspace\algorithmicindent \Vsym{postdot} as their postdot symbol
\EndIf
\EndFor
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Memoize transitions}

The \var{transitions} table for Earley set \Vloc{i}
is built once all EIMs have been
added to Earley set \Vloc{i}.
This can be done in
a single pass over Earley set \Vloc{i},
in \Oc{} time per EIM.
The time and space required are charged to the
Earley items being examined.
Any loop overhead may be charged to the Earley set.

In setting up the \var{transitions} table for the current Earley set,
the Leo items must be created.
For each Earley set,
the number of Leo items is at most
the number of symbols in
\Vsymset{alphabet}.
Since the maximum number of Leo items is a constant
depending on \Vg{},
their space and time may be charged to the Earley set.

\begin{algorithm}[h]
\caption{Reduce one LHS symbol}
\begin{algorithmic}[1]
\Procedure{Reduce one LHS}{\Vloc{i}, \Vloc{origin}, \Vsym{lhs}}
\State \Comment \var{pim} is a ``postdot item'', either a LIM or an EIM
\For{each $\var{pim} \in \var{transitions}(\Vloc{origin},\Vsym{lhs})$}
\If{\var{pim} is a LIM, \Vlim{pim}}
\State Perform a \Call{Leo reduction operation}{}
\State \hspace\algorithmicindent for operands \Vloc{i}, \Vlim{pim}
\Else
\State Perform a \Call{Earley reduction operation}{}
\State \hspace\algorithmicindent for operands \Vloc{i}, \Veim{pim}, \Vsym{lhs}
\EndIf
\EndFor
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Reduce one LHS}

Inclusive time is charged to the EIM attempt.
We see that
$\var{transitions}(\Vloc{origin},\Vsym{lhs})$
can be done in \Oc{} time
if we note
that the number of symbols is a constant
and assume that \Vloc{origin} is implemented
as a link back to the Earley set,
rather than as an integer index.
This requires that \Veim{work}
in \call{Reduction pass}{}
carry a link
back to its origin.
As implemented, Marpa's
Earley items have such links.

\begin{algorithm}[h]
\caption{Earley reduction operation}
\begin{algorithmic}[1]
\Procedure{Earley reduction operation}{\Vloc{i}, \Veim{from}, \Vsym{trans}}
\State $[\Vah{from}, \Vloc{origin}] \gets \Veim{from}$
\State $\Vah{to} \gets \GOTO(\Vah{from}, \Vsym{trans})$
\State \Call{Add EIM pair}{\Vloc{i}, \Vah{to}, \Vloc{origin}}
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Earley Reduction operation}
\label{p:reduction-op}

\begin{sloppypar}
Exclusive time and space is clearly \Oc.
Inclusive time and space is charged to the
calling procedure.
\end{sloppypar}

\begin{algorithm}[h]
\caption{Leo reduction operation}
\begin{algorithmic}[1]
\Procedure{Leo reduction operation}{\Vloc{i}, \Vlim{from}}
\State $[\Vah{from}, \Vsym{trans}, \Vloc{origin}] \gets \Vlim{from}$
\State $\Vah{to} \gets \GOTO(\Vah{from}, \Vsym{trans})$
\State \Call{Add EIM pair}{\Vloc{i}, \Vah{to}, \Vloc{origin}}
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Leo reduction operation}
\label{p:leo-op}

Exclusive time and space is clearly \Oc.
Inclusive time and space is charged to the
calling procedure.

\begin{algorithm}[h]
\caption{Add EIM pair}\label{a:pair}
\begin{algorithmic}[1]
\Procedure{Add EIM pair}{$\Vloc{i},\Vah{confirmed}, \Vloc{origin}$}
\State $\Veim{confirmed} \gets [\Vah{confirmed}, \Vloc{origin}]$
\State $\Vah{predicted} \gets \GOTO(\Vah{confirmed}, \epsilon)$
\If{\Veim{confirmed} is new}
\State Add \Veim{confirmed} to \Vtable{i}
\EndIf
\If{$\Vah{predicted} \neq \Lambda$}
\State $\Veim{predicted} \gets [\Vah{predicted}, \Vloc{i}]$
\If{\Veim{predicted} is new}
\State Add \Veim{predicted} to \Vtable{i}
\EndIf
\EndIf
\EndProcedure
\end{algorithmic}
\end{algorithm}

\subsection{Adding a pair of Earley items}
\label{p:add-eim-pair}

This operation adds a confirmed EIM
item and, if it exists, the EIM for
its null-transition.
Inclusive time and space is charged to the
calling procedure.
Trivially, the space is \Oc{} per call.

We show that time is also \Oc{}
by singling out two non-trivial cases:
checking that an Earley item is new,
and adding it to the Earley set.
It becomes clear
that an Earley item can be added to the current
set in \Oc{} time
if Earley set is seen as a linked
list, to the head of which the new Earley item is added.

Earley items are only added if they are new,
and showing that this check can be performed in \Oc{} time
per EIM,
and therefore per call to \call{Add EIM pair}{},
is more complicated.
A data structure that allows this
to be checked in \Oc{} time is very
briefly outlined in both
\cite[p. 97]{Earley1970} and
\cite[Vol. 1, pages 326-327]{AU1972}.
The data structures used are not named in either source,
and in this \doc{} they will be called ``per-Earley set lists'',
or PSL's.
PSL's are the subject of the next section.

\subsection{Per-set lists}

\begin{sloppypar}
A per-set list (PSL) is kept in each Earley set.
While \Marpa{} is building a new Earley set,
\EVtable{\Marpa}{j},
the PSL for every previous Earley set, \Vloc{i},
tracks the Earley items in \EVtable{\Marpa}{j} which have \Vloc{i}
as their origin.
The maximum number of Earley items that must be tracked
in each PSL is
the number of AHFA states,
\Vsize{\Vfa},
which is a constant depending on \Vg.
\end{sloppypar}

It would take more than \Oc{} time
to clear and rebuild the PSL's each time
that a new Earley set is started.
This can be avoided by ``dating'' each PSL
entry with the Earley set
which was current when that PSL
entry was last updated.

\begin{sloppypar}
Consider the case where Marpa is building \EVtable{\Marpa}{j}
and wants to check whether Earley item \Veim{x} is new,
where $\Veim{x} = [ \Vah{x}, \Vorig{x} ]$.
Let $\mymathop{PSL}(\Vloc{l}, \Vah{a})$
be the entry for \Vah{a} in the PSL for Earley set \Vloc{l}.
To check if \Veim{x} is new,
Marpa checks $\mymathop{PSL}(\Vloc{x}, \Vah{x})$.
Let the ``date'' for that PSL entry be \Vloc{p},
that is,
\begin{equation*}
    \mymathop{PSL}(\Vloc{x}, \Vah{x}) = \Vloc{p}
\end{equation*}
(If the entry has never been used,
we assume that $\Vloc{p} = \Lambda$.)
If $\Vloc{p} \ne \Lambda \land \Vloc{p} = \Vloc{j}$,
then \Veim{x} is not new,
and will not be added to the Earley set.
\end{sloppypar}

If $\Vloc{p} = \Lambda \lor \Vloc{p} \ne \Vloc{j}$,
then \Veim{x} is new.
\Veim{x} is added to the Earley set,
and the PSL's ``date'' is updated to \Vloc{j},
that is,
\begin{equation*}
    \mymathop{PSL}(\Vloc{x}, \Vah{x}) \gets \Vloc{j}.
\end{equation*}
As implemented,
Marpa uses PSL's to check if EIM's are new,
and for several other purposes.

\section{Preliminaries to the theoretical results}
\label{s:proof-preliminaries}

\subsection{Nulling symbols}
\label{s:nulling}

As noted, Marpa grammars,
without loss of generality,
contain neither empty rules or
properly nullable symbols.
This corresponds directly
to a grammar rewrite in the \Marpa{} implementation,
and its reversal during \Marpa's evaluation phase.
For the correctness and complexity proof in this section,
we assume an additional rewrite,
this time to eliminate nulling symbols.

Elimination of nulling symbols is also
without loss of generality, as can be seen
if we assume that a history
of the rewrite is kept,
and that the rewrite is reversed
after the parse.
Clearly, whether a grammar \Vg{} accepts
an input \Vw{}
will not depend on the nulling symbols in its rules.

In its implementation,
\Marpa's does not directly rewrite the grammar
to eliminate nulling symbols.
But nulling symbols are ignored in
creating the AHFA states,
and must be restored during \Marpa's evaluation phase,
so that the implementation and
this simplification for theory purposes
track each other closely.

A question for future research is whether directly
rewriting the grammar to eliminate nulling
would in fact be a better implementation.
Most or all potential
efficiency gains are already realized through
the use of the AHFA,
but the rewrite of the Earley items after
the parse would allow the nulling symbols
to be added based on full knowledge of the
result of the parse.

\subsection{Comparing Earley items}

\begin{definition}
A Marpa Earley item \dfn{corresponds}
to a traditional Earley item
$\Veimt{x} = [\Vdr{x}, \Vorig{x}]$
if and only if the Marpa Earley item is a
$\Veim{y} = [\Vah{y}, \Vorig{x}]$
such that $\Vdr{x} \in \Vah{y}$.
This relation is reflexive:
A traditional Earley item, \Veimt{x}, corresponds to a
Marpa Earley item, \Veim{y}, if and only if
\Veim{y} corresponds to \Veimt{x}.
\end{definition}

\begin{definition}
A set of EIM's is \dfn{consistent} with respect to
a set of EIMT's,
if and only if each of the EIM's in the first set
corresponds to at least one of the
EIMT's in the second set.
A Marpa Earley set \EVtable{\Marpa}{i}
is \dfn{consistent} if and only if
all of its EIM's correspond to
EIMT's in 
\EVtable{\Leo}{i}.
\end{definition}

\begin{sloppypar}
\begin{definition}
A set of EIM's is \dfn{complete} with respect to
a set of EIMT's,
if and only if for every EIMT in the second set,
there is a corresponding EIM in the first set.
A Marpa Earley set \EVtable{\Marpa}{i}
is \dfn{complete} if and only if for every
traditional Earley item in \EVtable{\Leo}{i}
there is a corresponding Earley item in
\EVtable{\Marpa}{i}.
\end{definition}
\end{sloppypar}

\begin{definition}
We say that
a Marpa Earley set is \dfn{correct}
if and only that Marpa Earley set is complete
and consistent.
\end{definition}

\subsection{About AHFA states}

Several facts about AHFA's from \cite{AH2002}
will be heavily used in the following proofs.
For convenience, they are restated here.

\begin{observation}
\label{o:confirmed-AHFA-consistent}
AHFA confirmation is consistent.
That is, if all of the following are true
\begin{gather*}
    \Postdot{\Vdr{from}} \ne \Lambda \\
    \Postdot{\Vdr{from}} = \Vsym{t} \\
    \GOTO(\Vah{from}, \Vsym{t}) = \Vah{to} \\
    \Vdr{to} \in \Vah{to}
\end{gather*}
then there exists \Vdr{from} such that
\begin{equation*}
    \Next{\Vdr{from}} = \Vdr{to}
    \land \Vdr{from} \in \Vah{from}
\end{equation*}
\end{observation}

\begin{observation}
\label{o:confirmed-AHFA-complete}
AHFA confirmation is complete.
That is, if all of the following are true
\begin{gather*}
    \Postdot{\Vdr{from}} \ne \Lambda \\
    \Postdot{\Vdr{from}} = \Vsym{t} \\
    \GOTO(\Vah{from}, \Vsym{t}) = \Vah{to} \\
    \Vdr{from} \in \Vah{from}
\end{gather*}
then for all \Vdr{to}
\begin{equation*}
    \Next{\Vdr{from}} = \Vdr{to} \implies \Vdr{to} \in \Vah{to}
\end{equation*}
\end{observation}

\begin{observation}
\label{o:predicted-AHFA-consistent}
AHFA prediction is consistent.
That is, if
\begin{equation*}
    \GOTO(\Vah{from}, \epsilon) = \Vah{to}
    \land \Vdr{to} \in \Vah{to}
\end{equation*}
then there exists \Vdr{from} such that
\begin{equation*}
    \Vdr{to} \in \Predict{\Vdr{from}}
    \land \Vdr{from} \in \Vah{from}
\end{equation*}
\end{observation}

\begin{observation}
\label{o:predicted-AHFA-complete}
AHFA prediction is complete.
That is, if
\begin{equation*}
    \GOTO(\Vah{from}, \epsilon) = \Vah{to}
    \land \Vdr{from} \in \Vah{from}
\end{equation*}
then for all \Vdr{to}
\begin{equation*}
    \Vdr{to} \in \Predict{\Vdr{from}}
    \implies \Vdr{to} \in \Vah{to}
\end{equation*}
\end{observation}

\section{Marpa is correct}
\label{s:correct}

\begin{theorem}\label{t:table-correct}
Marpa's Earley sets are correct.
\end{theorem}

\subsection{Proof of Theorem \ref{t:table-correct}}

\begin{sloppypar}
The proof 
is by induction on the Earley sets.
The induction hypothesis is that all Earley sets
\EVtable{\Marpa}{i},
$0 \le \Vloc{i} \le \Vloc{n}$,
are complete and consistent,
and therefore correct.
We leave it as an exercise to show, as the
basis of the induction, that
\EEtable{\Marpa}{0} is complete and consistent.
\end{sloppypar}

To show the outer induction step, we show first
consistency, then completeness.
We show consistency by
an inner induction on the Marpa operations.
The inner induction hypothesis is that 
\EVtable{\Marpa}{i},
as so far built,
is consistent with respect to
\EVtable{\Leo}{i}.

As the basis of the inner induction,
an empty Marpa Earley set is
consistent, trivially.
We show the step of the inner induction by cases:
\begin{itemize}
\item \Marpa{} scanning operations;
\item \Marpa{} reductions when there are no Leo reductions; and
\item \Marpa{}'s Leo reductions
\end{itemize}

\subsubsection{Marpa scanning is consistent}
\label{s:scan-consistent}

For Marpa's scanning operation, we know
that the predecessor EIM is correct
by the outer induction hypothesis,
and that the token is correct
by the definitions in the preliminaries.
We know from Section \ref{p:scan-op},
that at most two EIM's will be added.
We now examine them in detail.

Let
\begin{equation*}
    \Vah{confirmed} = \GOTO(\Vah{predecessor}, \Vsym{token})
\end{equation*}
If $\Vah{confirmed} = \Lambda$,
the pseudocode of Section \ref{p:scan-op} shows
that we do nothing.
If we do nothing,
since \EVtable{\Marpa}{i} is consistent by the inner
induction hypothesis,
it remains consistent, trivially.
Otherwise, let
$\Veim{confirmed} = [\Vah{confirmed}, \Vloc{i}]$.
We see that \Veim{confirmed} is consistent with respect
to \EVtable{\Leo}{i}
by the definition of Earley scanning (Section~\ref{d:scan}),
and Observation~\ref{o:confirmed-AHFA-consistent}.
Consistency is invariant under union,
and since \EVtable{\Marpa}{i} is consistent by the inner induction,
\EVtable{\Marpa}{i} remains consistent after
\Veim{confirmed} is added.

\begin{sloppypar}
For predictions,
if $\Vah{confirmed} \ne \Lambda$, let
\begin{equation*}
\Vah{predicted} = \GOTO(\Vah{confirmed}, \epsilon)
\end{equation*}
If $\Vah{predicted} = \Lambda$,
the pseudocode of Section \ref{p:add-eim-pair} shows
that we do nothing.
If we do nothing,
since \EVtable{\Marpa}{i} is consistent by the inner
induction hypothesis,
it remains consistent, trivially.
Otherwise, let
\begin{equation*}
\Veim{predicted} = [\Vah{predicted}, \Vloc{i}].
\end{equation*}
We see that \Veim{predicted} is consistent with respect to
to \EVtable{\Leo}{i},
by the definition of Earley prediction (Section~\ref{d:prediction}) and
Observation ~\ref{o:predicted-AHFA-consistent}.
Consistency is invariant under union and,
since \EVtable{\Marpa}{i} is consistent by the inner induction,
\EVtable{\Marpa}{i} remains consistent after
\Veim{predicted} is added.
\end{sloppypar}

\subsubsection{Reduction consistency without Leo}
\label{s:reduction-consistent}

\begin{sloppypar}
We next show consistency for Marpa's reduction operation,
in the case where there is no Leo reduction.
There will be two cause EIM's, \Veim{predecessor}
and \Veim{component}.
\Veim{predecessor} will be correct by the outer induction
hypothesis
and \Veim{component}
will be consistent by the inner induction hypothesis.
From \Veim{component}, we will find zero or more transition
symbols, \Vsym{lhs}.
From this point,  the argument is very similar to
that for the case of the scanning operation.
\end{sloppypar}

Let
\begin{equation*}
\Vah{confirmed} = \GOTO(\Vah{predecessor}, \Vsym{lhs})
\end{equation*}
If $\Vah{confirmed} = \Lambda$, we do nothing,
and \EVtable{\Marpa}{i} remains consistent, trivially.
Otherwise, let
\begin{equation*}
\Veim{confirmed} = [\Vah{confirmed}, \Vloc{i}].
\end{equation*}
We see that \Veim{confirmed} is consistent with respect
to \EVtable{\Leo}{i}
by the definition of Earley reduction (Section~\ref{d:reduction}),
and Observation~\ref{o:confirmed-AHFA-consistent}.
By the invariance of consistency under union,
\EVtable{\Marpa}{i} remains consistent after
\Veim{confirmed} is added.

For predictions, the argument exactly repeats that of
Section \ref{s:scan-consistent}.
\EVtable{\Marpa}{i} remains consistent,
whether or not a \Veim{predicted} is added.

\subsubsection{Leo reduction consistency}
\label{s:leo-consistent}

\begin{sloppypar}
We now show consistency for Marpa's reduction operation,
in the case where there is a Leo reduction.
If there is a Leo reduction, it is signaled by the
presence of \Vlim{predecessor},
\begin{equation*}
\Vlim{predecessor} = [ \Vah{top}, \Vsym{lhs}, \Vorig{top} ]
\end{equation*}
in the Earley set where we would look
for the \Veim{predecessor}.
We treat 
the logic to create \Vlim{predecessor} as a matter of memoization
of the previous Earley sets,
and its correctness follows from
the outer induction hypothesis.
As the result of a Leo reduction,
\Leo{} will add
$[\Vdr{top}, \Vorig{top}]$
to \EVtable{\Leo}{j}.
Because the \Marpa{} LIM is correct,
using Observations \ref{o:confirmed-AHFA-consistent}
and \ref{o:confirmed-AHFA-complete}
and Theorem \ref{t:leo-singleton},
we see that \Vah{top} is the singleton set
$\set{ \Vdr{top} }$.
From Section \ref{p:leo-op}, we see
that, as the result of the Leo reduction,
\Marpa{} will add
\begin{equation*}
\Veim{leo} = [\Vah{top}, \Vorig{top}]
\end{equation*}
to \EVtable{\Marpa}{j}.
The consistency of \Veim{leo} follows from the definition
of EIM consistency,
and the consistency of
\EVtable{\Marpa}{i},
once \Veim{leo} is added,
follows by the invariance
of consistency under union.
\end{sloppypar}

\subsubsection{Marpa's Earley sets are consistent}
\label{s:sets-consistent}

Sections
\ref{s:scan-consistent},
\ref{s:reduction-consistent}
and
\ref{s:leo-consistent}
show the cases for the step of the inner induction,
which shows the induction.
It was the purpose of the inner induction to show
that consistency of \EVtable{\Marpa}{i} is invariant
under Marpa's operations.

\subsubsection{Marpa Earley set completeness}

It remains to show that,
when Marpa's operations are run as described
in the pseudocode of Section \ref{s:pseudocode},
that 
\EVtable{\Marpa}{i} is complete.
To do this,
we show that
at least one EIM in \EVtable{\Marpa}{i}
corresponds to every EIMT in 
\EVtable{\Leo}{i}.
We will proceed by cases,
where the cases are \Leo{} operations.
For every operation which \Leo{} would perform,
we show that
\Marpa{} performs an operation which
produces a corresponding Earley item.
Here are our cases for the operations of \Leo{}:
\begin{itemize}
\item traditional \Earley{} scanning operations;
\item traditional \Earley{} reductions;
\item Leo reductions;
\item traditional \Earley{} predictions;
\end{itemize}

\subsubsection{Scanning completeness}
\label{s:scan-complete}

\begin{sloppypar}
For scanning, the Marpa pseudocode shows
that, a scan is attempted for every
pair \Veim{predecessor}, \Vsym{token},
where \Veim{predecessor} is an EIM in the previous
Earley set,
and \Vsym{token} is the token scanned at \Vloc{i}.
(The pseudocode actually finds
\Veim{predecessor} in a set
returned by $\mymathop{transitions}()$.
This is a memoization for efficiency
and we will ignore it.)
\end{sloppypar}

By the preliminary definitions, we know that \Vsym{token}
is the same in both \Earley{} and \Leo.
By the outer induction hypothesis we know that,
for every traditional Earley item in the previous
Earley set,
there is at least one corresponding Marpa Earley item.
Therefore, \Marpa{} performs its scan operation on a complete set
of correct operands.

Comparing the Marpa pseudocode (section \ref{p:scan-op}), 
with the Earley scanning operation (section \ref{d:scan})
and using
Observations~\ref{o:confirmed-AHFA-complete}
and \ref{o:predicted-AHFA-complete},
we see that a Earley item will be added to
\EVtable{\Marpa}{i} corresponding to every scanned Earley item
of \EVtable{\Leo}{i}.
We also see,
from the pseudocode of Section \ref{p:add-eim-pair},
that the \Marpa{} scanning operation will
add to \EVtable{\Marpa}{i}
an Earley item for
every prediction that results from
a scanned Earley item in \EVtable{\Leo}{i}.

\subsubsection{Earley reduction completeness}
\label{s:reduction-complete}

We now examine Earley reduction,
under the assumption that there is
no Leo transition.
The Marpa pseudocode shows that the Earley items
\EVtable{\Marpa}{i}
are traversed in a single pass for reduction.

To show that these predecessors are paired
with a complete and correct sets of component Earley items,
we stipulate the Earley set is an ordered set,
and that new Earley items are added at the end.
The number of Earley items is at most $\Vsize{ah} \times \var{i}$,
where \Vsize{ah} is the number of AHFA states,
so a traversal of them must terminate.

Consider, for the purposes of an inner induction,
the reductions of \Leo{} to occur in generations.
Let the scanned Earley items be generation 0.
An EIMT produced by a reduction is generation $\var{n} + 1$
if its component Earley item was generation was \var{n}.
Predicted Earley items do not need to be assigned generations.
In Marpa grammars they can never contain completions,
and therefore can never act as the component of a reduction.

The induction hypothesis for the inner induction
is that for some \var{n},
the Earley items of \EVtable{\Marpa}{i} for generations 0 through \var{n}
are complete and consistent.

From Section \ref{s:sets-consistent},
we know that all Earley items in Marpa's sets are consistent.
In Section \ref{s:scan-complete},
we showed that generation 0 is complete --
it contains Earley items
corresponding to all of the generation 0 EIMT's of \Leo.
This is the basis of the inner induction.

Since we stipulated that \Marpa{} adds Earley items
at the end of each set,
we know that they occur in generation order.
Therefore \Marpa{},
when creating Earley items of generation $\var{n}+1$
while traversing \EVtable{\Marpa}{i},
can rely
on the inner induction hypothesis for 
the completeness of Earley items in
in generation \var{n}.

Let
\begin{equation*}
\Veim{working} = [\Vah{working}, \Vorig{working}]
\end{equation*}
be the Earley item in \EVtable{\Marpa}{i}
currently being considered as a potential component for
an Earley reduction operation.
From the pseudocode, we see
that reductions are attempted for every
pair \Veim{predecessor}, \Veim{working}.
(Again, $\mymathop{transitions}()$ is ignored
as a memoization.)
By the outer induction hypothesis we know that,
for every traditional Earley item in the previous
Earley set,
there is at least one corresponding Marpa Earley item.
We see from the pseudocode, therefore,
that for each \Veim{working}
that \Marpa{} performs its reduction operation on a complete set
of correct predecessors.
Therefore \Marpa{} performs its reduction operations on a
complete set of operand pairs.

Comparing the Marpa pseudocode (Section \ref{p:reduction-op})
with the Earley reduction operation (Section \ref{d:reduction})
and using
Observations~\ref{o:confirmed-AHFA-complete}
and \ref{o:predicted-AHFA-complete},
we see that a reduced Earley item of
generation $\var{n}+1$
will be added to
\EVtable{\Marpa}{i} corresponding to every reduced Earley item
of \EVtable{\Leo}{i},
as well as one corresponding
to every prediction that results from
a reduced Earley item
of generation $\var{n}+1$ in \EVtable{\Leo}{i}.
This shows the case of reduction completeness.

\subsubsection{Leo reduction completeness}
\label{s:leo-complete}

We now show completeness for Marpa's reduction operation,
in the case where there is a Leo reduction.
In Section \ref{s:leo-consistent},
we found that where \Leo{} would create
the EIMT $[\Vdr{top}, \Vorig{top}]$,
Marpa adds 
$[\Vah{top}, \Vorig{top}]$
such that $\Vdr{top} \in \Vah{top}$.
Since \Vdr{top} is a completed rule,
there are no predictions.
This shows the case immediately,
by the definition of completeness.

\subsubsection{Prediction completeness}
\label{s:prediction-complete}

\begin{sloppypar}
Predictions result only from items in the same Earley set.
In Sections \ref{s:scan-complete},
\ref{s:reduction-complete}
and \ref{s:leo-complete},
we showed that,
for every prediction that would result
from an item added to \EVtable{\Leo}{i},
a corresponding prediction
was added to \EVtable{\Marpa}{i}.
\end{sloppypar}

\subsubsection{Finishing the proof}
\begin{sloppypar}
Having shown the cases in Sections
\ref{s:scan-complete},
\ref{s:reduction-complete},
\ref{s:leo-complete} and
\ref{s:prediction-complete},
we know that Earley set
\EVtable{\Marpa}{i} is complete.
In section \ref{s:sets-consistent}
we showed that \EVtable{\Marpa}{i} is consistent.
It follows that \EVtable{\Marpa}{i} is correct,
which is the step of the outer induction.
Having shown its step, we have the outer induction,
and the theorem.
\qedsymbol
\end{sloppypar}

\subsection{Marpa is correct}

We are now is a position to show that Marpa is correct.
\begin{theorem}
$\myL{\Marpa,\Vg} = \myL{\Vg}$
\end{theorem}

\begin{proof}
From Theorem \ref{t:table-correct},
we know that
\begin{equation*}
[\Vdr{accept},0] \in \EVtable{\Leo}{\Vsize{w}}
\end{equation*}
if and only there is a
\begin{equation*}
[\Vah{accept},0] \in \EVtable{\Marpa}{\Vsize{w}}
\end{equation*}
such that $\Vdr{accept} \in \Vah{accept}$.
From the acceptance criteria in the \Leo{} definitions
and the \Marpa{} pseudocode,
it follows that
\begin{equation*}
\myL{\Marpa,\Vg} = \myL{\Leo,\Vg}.
\end{equation*}
By Theorem 4.1 in \cite{Leo1991}, we know that
\begin{equation*}
\myL{\Leo,\Vg} = \myL{\Vg}.
\end{equation*}
The theorem follows from
the previous two equalities.
\end{proof}

\section{Marpa recognizer complexity}
\label{s:complexity}

\subsection{Nulling symbols}
For the complexity proofs,
we consider only Marpa grammars without nulling
symbols.
When we examined correctness,
we showed that this rewrite
is without loss of generality
in Section \ref{s:nulling}.
For complexity we must also show that
the rewrite and its reversal can be done
in amortized \Oc{} time and space
per Earley item.

One way to show the required bound is
to charge
the time and space involved in rewriting Earley
items with nulling symbols directly to
the Earley item to which they are rewritten
and from which they can be restored.
Since
the number of occurrences of nulling symbols in any rule
or in any AHFA state is a constant depending on the grammar,
the time and space involved are also constant,
and our bound follows.

\subsection{Complexity of each Earley item}

\begin{theorem}\label{t:O1-per-eim}
All time in \Marpa{} can be allocated
to the Earley items,
and in such a way that each attempt to
add an Earley item
requires \Oc{} time and space.
\end{theorem}

\begin{proof}
The theorem follows from the observations
in Section \ref{s:pseudocode}.
\end{proof}

\subsection{Duplicate dotted rules}

The same complexity results apply to \Marpa{} as to \Leo,
and the proofs are very similar.
\Leo's complexity results\cite{Leo1991}
are based on charging
resource to Earley items,
as were the results
in Earley's paper\cite{Earley1970}.
But both assume that there is one dotted rule
per Earley item,
which is not the case with \Marpa.

\Marpa's Earley items group dotted rules into AHFA
states, but this is not a partitioning in the strict
sense -- dotted rules can fall into more than one AHFA
state.
This is an optimization,
in that it allows dotted rules,
if they often occur together,
to be grouped together aggressively.
But it opens up the possibility
that, in cases where \Earley{} and \Leo{} disposed
of a dotted rule once and for all,
\Marpa{} might have to deal with it multiple times.

From an efficiency perspective,
\Marpa's duplicate rules
are by all the evidence, a plus.
And they do not change the complexity results,
although the price of showing this is the
theoretical apparatus of this section.

\begin{theorem}\label{t:marpa-O-leo}
\begin{equation*}
    \Rtablesize{\Marpa} \le \var{c} \times \Rtablesize{\Leo},
\end{equation*}
where \var{c} is a constant which depends on the grammar.
\end{theorem}

\begin{proof}
We know from Theorem \ref{t:table-correct}
that every Marpa Earley item corresponds to one of
\Leo's traditional Earley items.
If an EIM corresponds to an EIMT,
the AHFA state of the EIM contains the
EIMT's dotted rule,
while their origins are identical.
The worst case is that a dotted rule appears
in every AHFA state,
so that
the number of Marpa items corresponding to a single
traditional Earley item cannot be greater
than $\size{\Vfa}$.
Therefore,
\begin{equation*}
    \Rtablesize{\Marpa} \le \size{\Vfa} \times \Rtablesize{\Leo}\qedhere
\end{equation*}
\end{proof}

\begin{theorem}\label{t:tries-O-eims}
For an unambiguous grammar,
the number of attempts to add
Earley items will be less than or equal to
\begin{equation*}
\var{c} \times \Rtablesize{\Marpa},
\end{equation*}
where \var{c} is a constant.
\end{theorem}

\begin{proof}
Earley\cite{Earley1970} shows that,
for unambiguous grammars,
every attempt to add
an Earley item will actually add one.
In other words, there will be no attempts to
add duplicate Earley items.
Earley's proof shows that for each attempt
to add a duplicate,
the causation must be different --
that the EIMT's causing the attempt
differ in either their dotted
rules or their origin.
Multiple causations for an Earley item
would mean multiple derivations
for the sentential form that it represents.
That in turn would mean that
the grammar is ambiguous,
contrary to assumption.

In \Marpa, there is an slight complication,
because of which we must prove a result which is weaker,
but still sufficient to produce the same complexity results.
In \Marpa, a dotted rule can occur in more than one AHFA
state.
Because of that,
it is possible that two attempts to add an EIM
will have identical causation,
and therefore will be
consistent with an unambiguous grammar.

We now restate our argument more formally.
Let \var{initial-tries} be the number of attempts to add the initial item to
the Earley sets.
For Earley set 0, it is clear from the pseudocode
that there will be no attempts to add duplicate EIM's:
\begin{equation*}
\var{initial-tries} = \size{\Vtable{0}}
\end{equation*}

Let \var{leo-tries} be the number of attempted Leo reductions in
Earley set \Vloc{j}.
For Leo reduction,
we note that by its definition,
duplicate attempts at Leo reduction cannot occur.
Let \var{max-AHFA} be the maximum number of 
dotted rules in any AHFA state.
Clearly there will be at most one Leo reduction for
each each dotted rule in the current Earley set,
\Vloc{j}.
\begin{equation*}
\var{leo-tries} \le \var{max-AHFA} \times \size{\Vtable{j}}
\end{equation*}

Let \var{scan-tries} be the number of attempted Leo reductions in
Earley set \Vloc{j}.
Marpa attempts a scan operation,
in the worst case,
once for every EIM in the Earley set \Eloc{(\var{j} \subtract 1)}.
Therefore, the number of attempts
to add scans
must be less than equal to \size{\Vtable{j-1}},
the number
of actual Earley items at \Eloc{(\var{j} \subtract 1)}.
\begin{equation*}
\var{scan-tries} \le \size{\Vtable{j-1}}
\end{equation*}

Let \var{predict-tries} be the number of attempted predictions in
Earley set \Vloc{j}.
\Marpa{} includes prediction
in its scan and reduction operations,
and the number of attempts to add duplicate predicted EIM's
must be less than or equal
to the number of attempts
to add duplicate confirmed EIM's
in the scan and reduction operations.
\begin{equation*}
\var{predict-tries} \le \var{reduction-tries} + \var{scan-tries}
\end{equation*}

The final and most complicated case is Earley reduction.
\Marpa{} attempts to add a reduced EIM
once for every each pair
\begin{equation*}
[\Veim{predecessor}, \Vsym{lhs}],
\end{equation*}
where \Vsym{lhs} is the LHS
of a completed rule in the AHFA state
of a component EIM in the current Earley set,
and \Veim{predecessor} is an EIM
in the Earley set which is origin of the component EIM.
The number of possibilities for \Vsym{lhs}
is less than or equal to
$\var{max-AHFA} \times \size{\Vtable{j}}$,
where \var{max-AHFA} is the maximum number of completed rules in
an AHFA state,
and $\size{\Vtable{j}}$ is the number of Earley items
in the Earley set being built.

Here the memoization of $\mymathop{transitions}$
plays a role.
Because it uses $\mymathop{transitions}$,
Marpa makes a reduction attempt for
only those \Veim{predecessor}'s whose AHFA state
contains a dotted rule with a postdot symbol
that matches the transition symbol.
Call this number \Vsize{matching}.
The number of reduction attempts will be less than
\begin{equation*}
\var{max-AHFA} \times \Vsize{matching} \times \size{\Vtable{j}}
\end{equation*}

Since by assumption
\Vg{} is unambiguous,
we know that all attempts to add duplicate
EIM's will be for predecessors
which have the same dotted rule.
(If this were not the case,
the two dotted rules would produce different
derivations, contrary to the assumption that
the grammar is ambiguous.)
As a worst case, assume that a dotted rule
appears in every AHFA state.
Then $\var{matching} \le \size{\Vfa}$,
where \Vsize{\Vfa} is the number of AHFA states,
a constant that depends on \Vg.
From the foregoing, we know that 
\begin{equation*}
\var{reduction-tries} \le \var{max-AHFA} \times \size{\Vfa} \times \size{\Vtable{j}}
\end{equation*}

\begin{sloppypar}
The arithmetic for
summing \var{scan-tries},
\var{leo-tries},
\var{predict-tries}
and
\var{reduction-tries}
over the Earley sets,
and then adding
\var{initial-tries},
is tedious.
But since \var{max-AHFA} and \size{\Vfa} are both constants
which depend only on \Vg,
it is clear that there is a constant \var{c}
such that
\begin{equation*}
\var{tries} \le \var{c} \times \Rtablesize{\Marpa}
\end{equation*}
where \var{c} is a constant which depends on \Vg.\qedhere
\end{sloppypar}
\end{proof}

\subsection{The complexity results}
We are now in a position to show
specific time and space complexity results.
For these we follow the tradition by
expressing \Vsize{\Vw},
the length of the input,
as \var{n}.

\begin{theorem}
For every LR-regular grammar,
\Marpa{} runs in $\order{n}$ time and space.
\end{theorem}

\begin{proof}
By Theorem 4.6 in \cite[p. 173]{Leo1991},
the number of traditional Earley items produced by
\Leo{} when parsing input \Vw{} with an LR-regular grammar \Vg{} is
\begin{equation*}
\order{\Vsize{\Vw}} = \order{\var{n}}.
\end{equation*}
By Theorem \ref{t:marpa-O-leo},
the number of EIM's \Marpa{} will require for the same parse
is, worst case, $\var{c} \times \order{\var{n}}$,
where \var{c} is a constant which depends on \Vg.
LR-regular grammar are unambiguous, so that
by Theorem \ref{t:tries-O-eims},
the number of attempts that \Marpa{} will make to add
EIM's is on the order of
\begin{equation*}
    \var{d} \times \var{c} \times \order{\var{n}}
\end{equation*}
where \var{d} is a constant which depends on \Vg.
Therefore,
by Theorem \ref{t:O1-per-eim},
the time and space complexity of \Marpa{} for LR-regular
grammars is
\begin{equation*}
    \var{d} \times \var{c} \times \order{\var{n}}
    = \order{\var{n}}.\qedhere
\end{equation*}
\end{proof}

\begin{theorem}
For every unambiguous grammar,
\Marpa{} runs in $\order{n^2}$ time and space.
\end{theorem}

\begin{proof}
EIM's have the form $[\Vah{x}, \Vorig{x}]$.
\Vorig{x} is the origin of the EIM,
which in Marpa cannot be after the current
Earley set \Vloc{i},
so that
\begin{equation*}
0 \le \Vorig{x} \le \Vloc{i}.
\end{equation*}
The possibilities for \Vah{x} are finite,
since the number of AHFA states is a constant,
$\size{\Vfa}$,
which depends on \Vg.
Since duplicate EIM's are never added to an Earley set,
the maximum size of Earley set \Vloc{i} is therefore
\begin{equation*}
\Vloc{i} \times \size{\Vfa},
\end{equation*}
where in this context \Vloc{i} is to be treated
as an integer, the ordinal of Earley set \Vloc{i}.
Summing over the length of the input,
$\Vsize{\Vw} = \var{n}$,
the number of EIM's in all of \Marpa's Earley sets
is \order{\var{n}^2}.
By assumption, \Vg{} is unambiguous, so that
by Theorem \ref{t:tries-O-eims},
the number of attempts that \Marpa{} will make to add
EIM's is
\begin{equation*}
\var{c} \times \order{\var{n}^2},
\end{equation*}
where \var{c} is a constant which depends on \Vg.
Therefore,
by Theorem \ref{t:O1-per-eim},
the time and space complexity of \Marpa{} for LR-regular
grammars is \order{\var{n}^2}.
\end{proof}

\begin{theorem}
For any context-free grammar,
\Marpa{} runs in $\order{n^3}$ time.
\end{theorem}

\begin{proof}
Reexamining the proof of Theorem \ref{t:tries-O-eims},
we see that the only bound which required
the assumption that \Vg{} was unambiguous
was \var{reduction-tries},
the count of the number of attempts to
add Earley reductions.
Let \var{other-tries}
be attempts to add EIM's other than
as the result of Earley reductions.
By Theorem \ref{t:tries-O-eims},
\begin{equation*}
\var{other-tries} \le \var{c} \times \Vloc{i}.
\end{equation*}

\begin{sloppypar}
Reconsidering \var{reduction-tries}
for the case of ambiguous grammars,
we see that in the worst case the memoization of 
$\mymathop{transitions}(\Vloc{i}, \Vsym{lhs})$
accomplishes nothing,
because every item in
Earley set \Vloc{i} is returned.
Worst case, the count of EIM's in Earley set \Vloc{i}
is \order{\var{i}},
so that the number of attempts to add EIM reductions
to each Earley set \Vloc{j} is
on the order of
\begin{equation*}
\order{\var{i}} \times \size{\EVtable{\Marpa}{j}}
= \order{\var{i}} \times \order{\var{j}} = \order{\var{j}^2}
\end{equation*}
When \Vg{} can be ambiguous
the order of magnitude of all attempts to add EIM's
becomes
\begin{equation*}
 \sum\limits_{\Vloc{j}=0}^{n}{\order{\var{j}^2}+ \var{c} \times \Vloc{j}} = \order{\var{n}^3}
\end{equation*}
Therefore,
by Theorem \ref{t:O1-per-eim},
the time complexity of \Marpa{} for context-free
grammars is \order{\var{n}^3}.\qedhere
\end{sloppypar}
\end{proof}

\section{Generalizing the grammar}
\label{s:generalization}

As implemented,
Marpa generalizes the idea of grammars
and input streams beyond that so far described
for \Vg{} and \Vw.
The differences are
minor from a theoretical point of view,
and to avoid cluttering the proofs,
their discussion was deferred.

\subsection{All symbols are terminals}

Marpa's grammars are in effect 3-tuples:
\begin{equation*}
(\Vsymset{alphabet}, \Vrules, \Vsym{start})
\end{equation*}
\Vsymset{term} is omitted, because
Marpa allows a symbol to be both a terminal
and a LHS.
This expansion of the grammar definition
is made without loss of generalization,
or effect on the results.

The Marpa implementation has options,
using which the user can 
have the traditional restrictions
enforced, in part or in whole.
For error detection and efficiency,
many users may prefer this.

\subsection{Alternative input models}

In this \doc{},
up to this point,
the traditional input stream model
has been assumed.
Marpa's input model is a generalization of
the traditional input stream model.
Marpa's input is a set of tokens,
\var{tokens},
whose elements are triples of symbol,
start location and end location:
\begin{equation*}
    (\Vsym{t}, \Vloc{start}, \var{length})
\end{equation*}
such that
\begin{equation*}
    \var{length} \ge 1 \wedge \Vloc{start} \ge 0
\end{equation*}
The size of the input, \size{\Vw},
is the maximum over
\var{tokens} of $\Vloc{start}+\var{length}$.

\begin{sloppypar}
Multiple tokens can start at a single location.
(This is how \Marpa{} supports ambiguous tokens.)
Tokens may have multiple lengths.
The variable-length,
ambiguous and overlapping tokens
of \Marpa{}
bend the conceptual framework of ``parse location''
beyond its breaking point,
and a new term for parse location is introduced,
the \dfn{earleme}.
Token length is measured in earlemes,
and the start and end location of a token is indicated in earlemes.
\end{sloppypar}

Like standard parse locations, earlemes start at 0,
and run up to \size{\Vw}.
Unlike standard parse locations,
there is not necessarily a token ``at'' any particular earleme.
(A token is considered to be ``at an earleme'' if it ends there,
so that there is never a token ``at'' earleme 0.)
In fact,
there may be earlemes at which no token either starts or ends,
although for the parse to succeed, such an earleme would have to be
``inside'' at least one token.
Here ``inside a token'' means after the token's start earleme
and before the token's end earleme.

In the Marpa input stream, tokens
may interweave and overlap freely,
but gaps are not allowed.
That is,
\begin{multline*}
     \forall \Vloc{i}, 0 \le \var{i} < \size{\Vw}, \\
     \exists (\Vsym{t}, \Vloc{start}, \var{length}) \in \var{tokens}, \\
    \var{start} \le \var{i} < \var{start}+\var{length}
\end{multline*}

The intent of Marpa's generalized input model is to allow
users to define alternative input models for special
applications.
An example that arises in current practice is natural
language, features of which are most
naturally expressed with ambiguous tokens.
The traditional input stream can be seen as the special case of
the Marpa input model where
for all \Vsym{x}, \Vsym{y}, \Vloc{x}, \Vloc{y},
\var{xlength}, \var{ylength}
if we have both of
\begin{align*}
    [\Vsym{x}, \Vloc{x}, \var{xlength}] & \in \var{tokens} \\
    [\Vsym{y}, \Vloc{y}, \var{ylength}] & \in \var{tokens}
\end{align*}
then we have both of
\begin{gather*}
\var{xlength} = \var{ylength} = 1 \\
     \Vloc{x} = \Vloc{y} \implies \Vsym{x} = \Vsym{y}
\end{gather*}

The correctness results hold for Marpa input streams,
but to preserve the time complexity bounds,
two restrictions must be imposed.
To state them,
we first define
$\mymathop{future}(\var{i})$.
Let \Vloc{i} be the current Earley set.
$\mymathop{future}(\var{i})$ is
a set of parse locations,
such that
\begin{equation*}
\Vloc{j} \in \mymathop{future}(\var{i})
\end{equation*}
if and only if
there is a token
\begin{equation*}
[\Vsym{t}, \Vloc{start}, \var{length}],
\end{equation*}
such that we have both of
\begin{gather*}
    \var{j} = \var{start} + \var{length} \\
    \var{start} \le \Vloc{i}
\end{gather*}

The two restrictions are then as follows,
where \var{c} is a constant:
\begin{itemize}
\item For all \Vloc{i},
the cardinality of $\mymathop{future}(\Vloc{i})$
is less than \var{c}.
\item The number of tokens which start at any one location
is less than \var{c}.
\end{itemize}
These restrictions on Marpa input streams most
probably do not restrict their practical use.
And with them,
the complexity results for \Marpa{} stand.

\bibliographystyle{plain}

\begin{thebibliography}{10}

\bibitem{AU1972}
Alfred H.~Aho and Jeffrey D.~Ullman.
\newblock The Theory of Parsing, Translation, and Computing
\newblock Prentice-Hall, Englewood Cliff, N.J., 1972.

\bibitem{AH2002}
John~Aycock and R.~Nigel~Horspool.
\newblock Practical Earley Parsing
\newblock {\em The Computer Journal},
    Vol. 45, No. 6, 2002, pp. 620-630.

\bibitem{Earley1970}
J.~Earley.
\newblock An efficient context-free parsing algorithm.
\newblock {\em Communications of the Association for Computing Machinery},
  13(2):94--102, 1970.

\bibitem{GJ2008}
Dirk~Grune and Ceriel~J.H Jacobs
\newblock {\em Parsing Techniques: A Practical Guide}.
\newblock Springer, Amsterdam, 2008.

\bibitem{Irons}
Edgar~T.~Irons.
\newblock A syntax-directed compiler for ALGOL 60.
\newblock {\em Communications of the Association for Computing Machinery},
 4(1):51-55, Jan. 1961

\bibitem{Johnson}
Stephen~C. Johnson.
\newblock Yacc: Yet another compiler-compiler.
\newblock In {\em Unix Programmer's Manual Supplementary Documents 1}. 1986.

\bibitem{Marpa-HTML}
Jeffrey~Kegler, 2011: Marpa-HTML.
\newblock \url{http://search.cpan.org/dist/Marpa-HTML/}.

\bibitem{Marpa-R2}
Jeffrey~Kegler, 2012: Marpa-R2.
\newblock \url{http://search.cpan.org/dist/Marpa-R2/}.

\bibitem{Marpa-XS}
Jeffrey~Kegler, 2011: Marpa-XS-1.002000.
\newblock \url{http://search.cpan.org/dist/Marpa-XS/}.

\bibitem{Leo1991}
J.~M. I.~M. Leo.
\newblock A general context-free parsing algorithm running in linear time on
  every {LR($k$)} grammar without using lookahead.
\newblock {\em Theoretical Computer Science}, 82:165--176, 1991.

\end{thebibliography}

\clearpage
\tableofcontents

\end{document}
